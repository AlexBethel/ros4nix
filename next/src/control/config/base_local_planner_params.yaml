# base_local_planner configuration, which is responsible for computing
# velocity commands to send to the base controller given a high-level
# plan.
TebLocalPlannerROS:

 odom_topic: /t265/odom/sample
    
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.3
 dt_hysteresis: 0.1
 max_samples: 500
 global_plan_overwrite_orientation: True
 allow_init_with_backwards_motion: False
 max_global_plan_lookahead_dist: 3.0
 global_plan_viapoint_sep: -1
 global_plan_prune_distance: 1
 exact_arc_length: False
 feasibility_check_no_poses: 5
 publish_feedback: False
    
 # Robot
         
 max_vel_x: 2.0
 min_vel_x: 0.5
 max_vel_x_backwards: 2.0
 max_vel_y: 0.0
 max_vel_theta: 6.0
 acc_lim_x: 1.0
 acc_lim_theta: 1.0
 min_turning_radius: 0.1 # diff-drive robot (can turn on place!)

 footprint_model:
   type: "point"

 # GoalTolerance
    
 xy_goal_tolerance: 0.2
 yaw_goal_tolerance: 0.1
 free_goal_vel: False
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 0.7 # This value must also include our robot radius, since footprint_model is set to "point".
 inflation_dist: 0.6
 include_costmap_obstacles: True
 costmap_obstacles_behind_robot_dist: 1.5
 obstacle_poses_affected: 15

 dynamic_obstacle_inflation_dist: 0.6
 include_dynamic_obstacles: True

 costmap_converter_plugin: ""
 costmap_converter_spin_thread: True
 costmap_converter_rate: 5

 # Optimization
    
 no_inner_iterations: 5
 no_outer_iterations: 4
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_optimaltime: 1 # must be > 0
 weight_shortest_path: 0
 weight_obstacle: 100
 weight_inflation: 0.2
 weight_dynamic_obstacle: 10
 weight_dynamic_obstacle_inflation: 0.2
 weight_viapoint: 1
 weight_adapt_factor: 2

 # Homotopy Class Planner

 enable_homotopy_class_planning: True
 enable_multithreading: True
 max_number_classes: 4
 selection_cost_hysteresis: 1.0
 selection_prefer_initial_plan: 0.9
 selection_obst_cost_scale: 100.0
 selection_alternative_time_cost: False
 
 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 5
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_heading_threshold: 0.45
 switching_blocking_period: 0.0
 viapoints_all_candidates: True
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: True
 shrink_horizon_min_duration: 10
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10
# DWAPlannerROS:
#   min_vel_x: 0.05
#   max_vel_x: 0.3
#   max_vel_y: 0.0

#   max_vel_theta: 0.1
#   min_in_place_val_theta: 0.01

#   publish_cost_grid_pc: true
#   acc_lim_theta: 0.01
#   acc_lim_x: 0.5
#   acc_lim_y: 0.0

#   yaw_goal_tolerance: 0.05
#   xy_goal_tolerance: 0.2

#   # We are not a holonomic robot, instead we are differential drive. Our robot has no way to "strafe"

#   # Debug only disable
#   visualize_potential: false

#   holonomic_robot: false

#   # Warning!
#   #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
#   #   are non-negligible and small in place rotational velocities will be created.

#   max_rot_vel: 0.1 # choose slightly less than the base's capability
#   min_rot_vel: 0.02  # this is the min angular velocity when there is negligible translational velocity
#   # rot_stopped_vel: 0.4

#   acc_lim_x: 0.5 # maximum is theoretically 2.0, but we
#   acc_lim_theta: 2
#   acc_lim_y: 0.0      # diff drive robot

# # Goal Tolerance Parameters
#   yaw_goal_tolerance: 0.3  # 0.05
#   xy_goal_tolerance: 0.15  # 0.10
#   latch_xy_goal_tolerance: false

# # Forward Simulation Parameters
#   sim_time: 1.0       # 1.7
#   vx_samples: 6       # 3
#   vy_samples: 1       # diff drive robot, there is only one sample
#   vtheta_samples: 20  # 20

# # Trajectory Scoring Parameters
#   path_distance_bias: 64.0      # 32.0   - weighting for how much it should stick to the global path plan
#   goal_distance_bias: 24.0      # 24.0   - wighting for how much it should attempt to reach its goal
#   occdist_scale: 0.8            # 0.01   - weighting for how much the controller should avoid obstacles
#   # forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
#   stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
#   scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
#   max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# # Oscillation Prevention Parameters
#   oscillation_reset_dist: 1  # 0.05   - how far to travel before resetting oscillation flags

# # Debugging
#   publish_traj_pc : true
#   publish_cost_grid_pc: true
#   global_frame_id: odom
