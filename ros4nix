#!/usr/bin/env bash
set -eo pipefail
IFS=$'\n\t'

# TODO: this script shouldn't restart ROS units that haven't changed.

shopt -s nullglob

print_help () {
    echo -n "ros4nix: a simple tool for managing ROS via Nix without NixOS.

Usage: $0 <operation> [arguments ...]

Supported operations are:

  switch        Install and activate a configuration. This is the most
                common operation, and is intended to be idempotent and
                reversible.

  chroot        Open a shell inside the ros4nix installation.

  activate      Re-activate the currently-installed system. This should
                (almost) never have to be run manually as it is run
                automatically by the 'switch' operation. Just makes
                sure the ROS installation is consistent.

  check         Performs a basic analysis to check that a configuration
                is OK without actually installing it.

  boot          Activates the given configuration file and ensures that
                all services will run at the next system reboot, but
                does not actually start any services.

  cflags        Generate a compile_flags.txt file in the current
                directory, suitable for working with clangd.

  reset         Disables ros4nix systemd services, while leaving the ROS
                rootfs directory (/var/ros) intact.

  purge         Uninstalls the ros4nix subsystem and deletes the ROS
                rootfs directory.

Use $0 <operation> --help for more information.
" > /dev/stderr
}

print_help_switch () {
    echo -n "ros4nix switch: switch to a new configuration

Usage: $0 switch <config_file>

Install and activate a configuration. This is the most common
operation in ros4nix, and is intended to be idempotent and reversible.
" > /dev/stderr
}

print_help_chroot () {
    echo -n "ros4nix chroot: chroot into the ROS installation

Usage: $0 chroot

Open a shell inside the ros4nix installation.
" > /dev/stderr
}

print_help_activate () {
    echo -n "ros4nix activate: re-activate the current configuration

Usage: $0 activate

Re-activate the currently-installed system. This should (almost) never
have to be run manually as it is run automatically by the 'switch'
operation. Just makes sure the ROS installation is consistent.
" > /dev/stderr
}

print_help_check () {
    echo -n "ros4nix check: check a configuration

Usage: $0 check <config_file>

Performs a basic analysis to check that a configuration is OK without
actually installing it.
" > /dev/stderr
}

print_help_cflags () {
    echo -n "ros4nix cflags: generate compile_flags.txt

Usage: $0 cflags

Generate a compile_flags.txt file in the current directory, suitable
for working with clangd.
"
}

print_help_reset () {
    echo -n "ros4nix reset

Usage: $0 reset

Uninstalls the ros4nix subsystem, while leaving the ROS rootfs
directory (/var/ros) intact.
" > /dev/stderr
}

print_help_purge () {
    echo -n "ros4nix purge

Usage: $0 purge

Uninstalls the ros4nix subsystem and deletes the ROS rootfs
directory.
" > /dev/stderr
}

# Checks that Nix is installed, and if not, installs it.
check_nix () {
    if ! [ -e /nix ]; then
        echo 'Nix is not installed.'

        if [ "$(id -u)" = 0 ]; then
            echo 'Installing Nix as root is not allowed.'
            echo 'Run this script as non-root.'
        fi

        echo -n 'Would you like me to install it for you [yN]? '
        read input
        if [ "${input,,?}" != "y" ]; then
            echo 'Aborting.'
            return 1
        fi

        if ! type curl > /dev/null; then
            echo 'Curl is not installed either.'
            if type apt > /dev/null; then
                echo "This is an APT machine. I'm going to go ahead and install curl for you."
                sudo apt install curl xz-utils
            else
                echo 'Please install curl and try again.'
                return 1
            fi
        fi

        sh <(curl -L https://nixos.org/nix/install) --daemon
    fi
}

# Build the system at from the given configuration file, and fully
# install and activate it.
#
# install_system <configuration_file>
install_system () {
    build=$(build_system "$1")
    echo "Built NixOS system is $build"

    # Tell Nix to install the system into the ros4nix profile.
    sudo $(which nix-env) -p /nix/var/nix/profiles/ros4nix --set "$build"

    echo 'Switching to configuration...'
    uninstall_units
    activate_system
    load_units
    echo 'Activation done.'
}

# Builds the system from the configuration file, and prints out the
# build path.
#
# build_system <configuration_file>
build_system () {
    nix-build --no-out-link -E "
        with import <nixpkgs> {};
        (nixos (import ./$1)).ros4nix
    "
}

# Stop and uninstall the currently installed ROS system units, if any
# are present.
uninstall_units () {
    echo 'Stopping all running ROS systemd units...'
    for file in /etc/systemd/system/ros*.service; do
        echo "Stopping $(basename "$file")..."
        sudo systemctl stop $(basename "$file")
    done

    echo 'Disabling enabled ROS systemd units...'
    for file in /etc/systemd/system/ros*.service; do
        sudo systemctl disable $(basename "$file")
    done

    echo 'Uninstalling ROS systemd units...'
    for file in /etc/systemd/system/ros*.service; do
        sudo rm -v $file
    done
}

# Activate the ROS system. This is the equivalent of a NixOS
# activation script, and builds a new ROS rootfs in /var/ros, installs
# software as necessary, and then compiles the catkin workspace as
# necessary.
activate_system () {
    echo "Running ROS activation snippet..."
    sudo /nix/var/nix/profiles/ros4nix/bin/activate-ros

    if [ -e /etc/environment ]; then
        if ! grep -e 'nixWrappers' /etc/environment; then
            echo 'Adding /var/ros/nixWrappers to /etc/environment...'
            . /etc/environment
            echo "PATH=$PATH:/var/ros/nixWrappers" | sudo tee -a /etc/environment > /dev/null
            echo "You'll need to log out and back in for ROS to work."
        fi
    else
        echo "Warning: you don't have /etc/environment, I don't know how to"
        echo "         finalize the install! All the ROS executables are in"
        echo "         the directory /var/ros/nixWrappers/; you'll have to"
        echo "         add them to PATH yourself."
    fi
}

# Install and start ROS units as necessary.
load_units () {
    src=/nix/var/nix/profiles/ros4nix

    echo "Installing ROS systemd services from $src..."
    for service in $src/etc/systemd/system/ros*.service; do
        sudo cp -v "$service" /etc/systemd/system/
    done

    echo "Enabling necessary services..."
    for service in $src/etc/systemd/system/multi-user.target.wants/ros*.service; do
        echo "Enabling $(basename "$service")..."
        # sudo systemctl enable $(basename "$service")

        # That doesn't work because NixOS doesn't write an [Install]
        # section of its services; it's not a problem on NixOS because
        # Nix installs services rather than systemd, so we're gonna
        # have to emulate Nix's behavior here instead.
        sudo ln -s \
             /etc/systemd/system/$(basename "$service") \
             /etc/systemd/system/multi-user.target.wants/$(basename "$service")
    done

    sudo systemctl daemon-reload

    echo "Starting necessary services..."
    sudo systemctl start rosMaster.service
    for service in $src/etc/systemd/system/multi-user.target.wants/ros-*.service; do
        sudo systemctl start $(basename "$service")
    done
}

if [ "$#" = 0 ]; then
    print_help
    exit 1
fi

case "$1" in
    switch)
        shift
        if [ "$#" != 1 ] || [ "$1" = "--help" ]; then
            print_help_switch
            exit 1
        fi

        config_file="$1"
        check_nix
        . /etc/bashrc
        install_system "$config_file"
        ;;
    chroot)
        shift
        if [ "$#" != 0 ]; then
            print_help_chroot
        fi

        exec /nix/var/nix/profiles/ros4nix/bin/chroot-ros
        ;;
    activate)
        shift
        if [ "$#" != 0 ]; then
            print_help_activate
            exit 1
        fi

        activate_system
        ;;
    check)
        shift
        if [ "$#" != 1 ] || [ "$1" = "--help" ]; then
            print_help_check
            exit 1
        fi

        . /etc/bashrc
        sys=$(build_system "$@")
        echo "OK ($sys)"
        ;;
    boot)
        echo 'Not implemented'
        ;;
    cflags)
        shift
        if [ "$#" != 0 ]; then
            print_help_cflags
            exit 1
        fi

        # This is currently just a completely static file that
        # includes the ROS include directory, as well as a
        # Nix-provided version of boost that gets symlinked into
        # /var/ros; we mostly have this here in case the internal
        # structure changes later.
        #
        # It's actually critically important that this file not
        # include any Nix store paths, because people won't want to
        # actually run this command, they'll want to be able to check
        # out their repo and have autocomplete *just work*; and that
        # requires that compile_flags.txt be checked into the repo,
        # and therefore it can't vary between machines under any
        # circumstances.
        (
            # ROS include dirs.
            echo -n '-I'
            echo -n /var/ros/opt/ros/*
            echo -n /include
            echo

            # Boost.
            echo -n '-I'
            echo -n /var/ros/ext_libs/include
            echo

            # catkin workspace local include files.
            echo -n '-I'
            echo -n devel/include
            echo
        ) > compile_flags.txt
        echo 'generated file compile_flags.txt'
        ;;
    reset)
        shift
        if [ "$#" != 0 ]; then
            print_help_reset
            exit 1
        fi

        uninstall_units
        ;;
    purge)
        shift
        if [ "$#" != 0 ]; then
            print_help_purge
            exit 1
        fi

        uninstall_units
        sudo rm -rf /var/ros
        ;;
    *)
        print_help
        exit 1
        ;;
esac
